use std::iter::once;

use crate::token::*;
use crate::token::YumakToken;
use common::bytecode::Inst;

grammar<'input>(text: &'input str);

extern {
    type Location = usize;
    type Error    = crate::token::Error;
    enum YumakToken<'input> {
        "VAR"        => YumakToken::VAR(<&'input str>),
        LET          => YumakToken::LET{..},
        "NUMBER"     => YumakToken::NUMBER(<&'input str>),
        "CONST"      => YumakToken::CONST(<&'input str>),
        "COMMA"      => YumakToken::Comma{..},
        "SEMI"       => YumakToken::Semi{..},
        "TRUE"       => YumakToken::True{..},
        "FALSE"      => YumakToken::False{..},
        "PERIOD"     => YumakToken::Dot{..},
        "LPAREN"     => YumakToken::Lparen{..},
        "RPAREN"     => YumakToken::Rparen{..},
        "LBRACKET"   => YumakToken::Lbracket{..},
        "RBRACKET"   => YumakToken::Rbracket{..},
        "STRING"     => YumakToken::STRING(<&'input str>),

        Plus => YumakToken::Plus,
        Minus => YumakToken::Minus,
        Star => YumakToken::Star,
        Slash => YumakToken::Slash,

        Eq => YumakToken::Eq,
        EqEq => YumakToken::EqEq,
        Ne => YumakToken::Ne,
        
        Gt => YumakToken::Gt,
        Lt => YumakToken::Lt,
        Ge => YumakToken::Ge,
        Le => YumakToken::Le,

        Semi => YumakToken::Semi,
        Comma => YumakToken::Comma,
        Colon => YumakToken::Colon,
        Dot => YumakToken::Dot,
        At => YumakToken::At,
        ModSep => YumakToken::ModSep,
        
        Lparen => YumakToken::Lparen,
        Rparen => YumakToken::Rparen,
        Lbrace => YumakToken::Lbrace, 
        Rbrace => YumakToken::Rbrace,
        Lbracket => YumakToken::Lbracket,
        Rbracket => YumakToken::Rbracket,

        Var => YumakToken::Var,
        Function => YumakToken::Function,
        Return => YumakToken::Return,
        For => YumakToken::For,
        While => YumakToken::While,
        If => YumakToken::If,
        Else => YumakToken::Else,
        True => YumakToken::True,
        False => YumakToken::False,
    }
}

pub Toplevel: Vec<Inst> = {
  ExprTop,
  //Cmdtop
};

ExprTop: Vec<Inst> = {
  <Expr>                => vec![<>],
  <e:Expr> <t:Toplevel> => { once(e).chain(t.into_iter()).collect() }
};

Expr: Inst = {
    Alloc,
};

pub Alloc: Inst = {
  LET <id: "STRING"> => Inst::Alloc{
      name: id.to_string(),
  }
};